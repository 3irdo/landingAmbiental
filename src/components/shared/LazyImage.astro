---
import type { ImageMetadata } from "astro";
import { Picture } from "astro:assets";
import { Image } from "astro:assets";
import {
  getImage,
  type LocalImageProps,
  type RemoteImageProps,
} from "astro:assets";

type Props = (LocalImageProps | RemoteImageProps) & { className?: string };
const { src, alt, className = "", width, height, ...attrs } = Astro.props;
let dimensions = {
  width: width ? Number(width) : undefined,
  height: height ? Number(height) : undefined,
};
let placeholderDimensions = { newWidth: 0, newHeight: 0 };

const originalDimensions = {
  width: (src as ImageMetadata).width,
  height: (src as ImageMetadata).height,
};

if (dimensions.width && !dimensions.height) {
  dimensions.height = Math.round(
    (dimensions.width / originalDimensions.width) * originalDimensions.height
  );
} else if (dimensions.height && !dimensions.width) {
  dimensions.width = Math.round(
    (dimensions.height / originalDimensions.height) * originalDimensions.width
  );
} else if (!dimensions.width && !dimensions.height) {
  dimensions = {
    width: originalDimensions.width,
    height: originalDimensions.height,
  };
}

calcPlaceholderDimensions(
  dimensions.width,
  dimensions.height,
  originalDimensions.width,
  originalDimensions.height
);

function calcPlaceholderDimensions(
  povidedWidth: number | undefined,
  povidedHeight: number | undefined,
  originalWidth: number,
  originalHeight: number
) {
  let width = povidedWidth || originalWidth;
  let height = povidedHeight || originalHeight;
  const aspectRatio = width / height;
  if (width > height) {
    placeholderDimensions = {
      newWidth: 15,
      newHeight: Math.round(15 / aspectRatio),
    };
  } else {
    placeholderDimensions = {
      newWidth: Math.round(15 * aspectRatio),
      newHeight: 15,
    };
  }
}

const placeholderBackground = await getImage({
  src: src,
  format: "webp",
  width: placeholderDimensions.newWidth,
  height: placeholderDimensions.newHeight,
});
---

<Picture
  src={src as ImageMetadata}
  alt={alt}
  formats={["avif", "webp"]}
  class={className}
  decoding="async"
  loading="lazy"
  style={{
    backgroundImage: `url(${placeholderBackground.src})`,
    backgroundSize: "cover",
  }}
  densities={["3x"]}
  height={dimensions.height}
  width={dimensions.width}
  {...attrs as any}
/>
